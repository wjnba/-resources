<!-- @format -->

<!-- 图2全景监控 -->
<template>
  <div class="overview-panel" ref="inner">
    <div v-if="isFullscreen" class="fullscreen-title panorama-flex">
      <img
          src="@/assets/imgs/datacontrol@2x.png"
          alt=""
          @click="goToAllTaskView"
      />
      <h1>泸州市人大预算联网审查监督平台全景监控中心</h1>
      <img
          src="@/assets/imgs/cancelfullscreen@2x.png"
          alt=""
          @click="cancelFullScreen"
      />
    </div>
    <!-- <div class="outer-line"> -->
    <div
        class="inner-line border-grey"
        :class="[isFullscreen ? 'inner-line-fullscreen' : '']"
    >
      <div class="middle-part">
        <div class="center">
          <div class="center-top panorama-flex">
            <div
                class="panorama-primary border-light skew-right50 data-control"
                v-show="!isFullscreen"
            >
              <div
                  v-limitUser="['overviewInnerPanel:owpdataMonitoring']"
                  class="fs14 skew-left50"
                  @click="goToAllTaskView"
              >
                数据监控
              </div>
            </div>

            <div class="fs14 panorama-primary center-date">
              {{ currentTime }}
            </div>

            <div
                class="panorama-primary border-light skew-left50 fullscreen"
                v-show="!isFullscreen"
            >
              <div
                  v-limitUser="['overviewInnerPanel:owpfullScreen']"
                  class="fs14 skew-right50"
                  @click="toFullscreen"
              >
                全屏显示
              </div>
            </div>
          </div>
          <div class="map">
            <div ref="mapChart" class="map-chart"></div>
          </div>
          <img
              v-if="mapLevel == 0"
              src="@/assets/imgs/rod@2x.png"
              alt=""
              class="rod"
          />

          <div class="info" v-if="mapLevel == 0">
            <div>
              <div
                  v-limitUser="['overviewInnerPanel:owpdepartmentBudget']"
                  class="info-btn1 fs16 panorama-primary"
                  @click="goToDepartmentSummary"
              >
                部门预算
              </div>
              <div
                  v-limitUser="['overviewInnerPanel:owpTransferpayment']"
                  class="info-btn1 fs16 panorama-primary"
                  @click="goToTransferPayment()"
              >
                转移支付
              </div>
            </div>
          </div>
          <div class="distinct-info">
            <div
                class="distinct-btn fs16 panorama-primary"
                v-if="mapLevel == 1"
            >
              <div
                  @click="goToUpprerAuth"
                  v-limitUser="['overviewInnerPanel:owpreturn']"
              >
                返回上级
              </div>
            </div>
            <div class="disctinct-goto" v-if="mapLevel == 1">
              <!-- 上 -->
              <div
                  class="distinct-info-btn1 fs16 panorama-primary"
                  @click="goToResourceFile('anualFinal')"
                  v-limitUser="['overviewInnerPanel:owpAnnualaccounts']"
              >
                年度决算
              </div>
              <!-- 下 -->
              <!-- <div
                class="distinct-info-btn1 fs16 panorama-primary"
                @click="goToResourceFile('depBudget')"
                v-limitUser="['overviewInnerPanel:owpDepartmentbudget']"

              >
                部门预算
              </div> -->
              <!-- 左 -->
              <div
                  class="distinct-info-btn1 fs16 panorama-primary"
                  @click="goToResourceFile('anualBudget')"
                  v-limitUser="['overviewInnerPanel:owpannualbudget']"
              >
                年度预算
              </div>
              <!-- 右 -->
              <div
                  class="distinct-info-btn1 fs16 panorama-primary"
                  @click="goToResourceFile('budgetAdjustment')"
                  v-limitUser="['overviewInnerPanel:owpbudgetadjustment']"
              >
                预算调整
              </div>
            </div>
          </div>
          <img src="@/assets/imgs/leftBar@2x.png" alt="" class="leftrod"/>
          <img src="@/assets/imgs/rightBar@2x.png" alt="" class="rightrod"/>
        </div>
      </div>
      <div class="left-part">
        <div class="left-top border-dark-blue-wide">
          <div class="top-title">
            <div class="general-title skew-right50">
              <div class="skew-left50 fs18">四本预算执行进度</div>
            </div>
            <div class="btn-general skew-right50">
              <div
                  v-limitUser="['overviewInnerPanel:owpfourBudgetDetails']"
                  class="skew-left50 fs16"
                  @click="goToExecutionAnalysis"
                  v-if="mapLevel == 0 || mapLevel == 1"
              >
                查看详情<i class="el-icon-d-arrow-right"></i>
              </div>
            </div>
            <div class="panorama-primary dataEndTime">
              数据截止：
              <template v-if="leftTopStopYear && leftTopDataStopMonth">
                {{ leftTopStopYear }}年
                <span>{{ leftTopDataStopMonth }}{{['一般公共预算', '政府性基金预算'].includes(leftTopActiveName) ? '月' : ''}}</span>
              </template>
            </div>
          </div>
          <div class="left-top-content">
            <div class="top-tab left-top-tab">
              <el-tabs
                  v-model="leftTopActiveName"
                  @tab-click="leftTopHandleClick"
              >
                <el-tab-pane
                    label="一般公共预算"
                    name="一般公共预算"
                ></el-tab-pane>
                <el-tab-pane
                    label="政府性基金预算"
                    name="政府性基金预算"
                ></el-tab-pane>
                <el-tab-pane
                    label="国有资本经营预算"
                    name="国有资本经营预算"
                ></el-tab-pane>
                <el-tab-pane
                    label="社保基金预算"
                    name="社保基金预算"
                ></el-tab-pane>
              </el-tabs>
            </div>
            <div class="left-top-items">
              <div
                  class="left-top-item"
                  v-for="(item, index) in budgetProcessData"
                  :key="index"
              >
                <div class="left-top-item-content ">
                  <div class="fs18 panorama-primary left-top-item-title">
                    {{ item.title }}
                  </div>
                  <div class="panorama-flex">
                    <div class="left-top-item-left border-dark-blue">
                      <liquidFill
                          :percent="item.percentage"
                          :isBlue="true"
                          :insideText="insideText"
                      >
                      </liquidFill>
                      <div
                          class="fs14 liquid-fill-tag panorama-bg-tag"
                          :class="[
                          item.compare >= 0
                            ? 'panorama-danger'
                            : 'panorama-warning ',
                        ]"
                      >
                        同比<i
                          :class="[
                            item.compare >= 0
                              ? 'el-icon-top'
                              : 'el-icon-bottom ',
                          ]"
                      ></i
                      >{{ item.compare }}%
                      </div>
                    </div>
                    <div class="left-top-item-right">
                      <div class="fs16 panorama-white">
                        年初数：
                        <span>{{
                            formatNumberRgx(Math.round(item.yearStart / 10000))
                          }}</span>
                        <!-- <span v-else>{{ Math.round(item.yearStart) }}</span>  -->
                        <span class="fs16">亿元</span>
                        <!-- <span class="fs12" v-else>万元</span> -->
                      </div>
                      <div class="fs16 panorama-white">
                        调整数：
                        <span>{{
                            formatNumberRgx(Math.round(item.adjust / 10000))
                          }}</span>
                        <!-- <span v-else>{{ Math.round(item.adjust)  }}</span>  -->
                        <span class="fs16"> 亿元</span>
                        <!-- <span class="fs12" v-else> 万元</span> -->
                      </div>
                      <div class="fs16 panorama-primary">
                        执行数：
                        <span>{{
                            formatNumberRgx(Math.round(item.excute / 10000))
                          }}</span>
                        <!-- <span v-else>{{ Math.round(item.excute)  }}</span>  -->
                        <span class="fs16"> 亿元</span>
                        <!-- <span class="fs12" v-else> 万元</span> -->
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="left-bottom border-dark-blue-wide">
          <div class="top-title">
            <div class="general-title skew-right50">
              <div class="skew-left50 fs18">宏观经济运行指标</div>
            </div>
            <div class="btn-general skew-right50" @click="goToMacroscopicNorm">
              <div
                  class="skew-left50 fs16"
                  v-limitUser="['overviewInnerPanel:owpmacroeconomicDetails']"
                  v-if="mapLevel == 0"
              >
                查看详情<i class="el-icon-d-arrow-right"></i>
              </div>
            </div>
            <div class="panorama-primary dataEndTime">
              数据截止：{{ dataStopYear }}年
            </div>
          </div>
          <div class="left-bottom-content">
            <div class="left-bottom-select fs16 panorama-primary">
              类型
              <el-select
                  v-model="barChartSelectValue"
                  placeholder="请选择"
                  :popper-append-to-body="false"
              >
                <!-- :popper-append-to-body="false"可以解决全屏时el-select下拉菜单不显示问题。问题原因：elemrnt-ui会默认将弹出框插入至 body 元素；当设置了某个元素全屏时，会遮挡住原来的select下拉数据。 -->
                <el-option
                    v-for="item in barChartSelectOptions"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value"
                >
                </el-option>
              </el-select>
            </div>

            <div class="left-bottom-unit fs16 panorama-primary">单位：亿元</div>
            <div>
              <div class="fs16 panorama-warning">
                同比
                <img src="@/assets/imgs/compare.png" alt="" class="compare"/>
              </div>
            </div>
          </div>

          <div class="left-bottom-barChart" ref="barChart"></div>
        </div>
      </div>

      <div class="right-part">
        <div class="right-top border-dark-blue-wide">
          <div class="top-title">
            <div class="general-title skew-right50">
              <div class="skew-left50 fs18">政府债务情况</div>
            </div>
            <div class="btn-general skew-right50">
              <div
                  class="skew-left50 fs16"
                  @click="goToDeptAnalysis"
                  v-limitUser="['overviewInnerPanel:owpgovernmentDebtDetails']"
                  v-if="mapLevel == 0"
              >
                查看详情<i class="el-icon-d-arrow-right"></i>
              </div>
            </div>
            <div class="panorama-primary dataEndTime">
              数据截止：{{ dataStopYear_zhengfu }}年{{
                dataStopMonth_zhengfu
              }}月
            </div>
          </div>
          <div class="right-top-content">
            <div
                class="right-top-items"
                v-for="(item, index) in govDebtsData"
                :key="index"
            >
              <div class="right-top-content-left">
                <div class="right-top-firstblock">
                  <div class="panorama-white fs18 right-top-item-title">
                    {{ item.area_type }}限额
                  </div>
                  <div class="panorama-blue-btn fs20 panorama-bold">
                    {{ formatNumberRgx(Number(item.area_limit / 10000).toFixed(2)) }} 亿元
                  </div>
                </div>
                <div>
                  <div class="panorama-danger fs18 right-top-item-title">
                    {{ item.area_type }}余额
                  </div>
                  <div class="panorama-danger fs20 panorama-bold">
                    {{ formatNumberRgx(Number(item.area_rest / 10000).toFixed(2)) }} 亿元
                  </div>
                </div>
              </div>
              <div class="right-top-content-right">
                <div class="right-top-ratio">
                  <div class="panorama-white fs18 right-top-item-title">
                    {{ item.area_type }}债务率
                  </div>
                  <div
                      class="
                      panorama-blue-btn
                      fs22
                      panorama-bold
                      right-top-item-title
                    "
                  >
                    {{ item.debat_rate * 100 }}%
                  </div>
                </div>

                <process
                    :hasText="false"
                    :isPanorama="true"
                    :percent="item.debat_rate"
                ></process>
              </div>
            </div>
          </div>
        </div>
        <div class="right-bottom border-dark-blue-wide" v-if="mapLevel == 0">
          <!-- <div class="top-title">
            <div class="general-title skew-right50">
              <div class="skew-left50 fs18">联网监督问题分析</div>
            </div>
            <div class="skew-right50 special-btn">
              <div class="skew-left50 fs16">
                &nbsp
              </div>
            </div>
            <div class="panorama-primary dataEndTime">
              数据截止：{{ dataStopYear_warn }}年{{ dataStopMonth_warn }}月
            </div>
          </div> -->
          <div class="top-title">
            <div class="general-title skew-right50">
              <div class="skew-left50 fs18">国库余额分析</div>
            </div>
            <div class="skew-right50 btn-general ">
              <div
                  class="skew-left50 fs16"
                  @click="goToBalance"
                  v-if="mapLevel == 0"
              >
                查看详情<i class="el-icon-d-arrow-right"></i>
              </div>
            </div>
            <div class="panorama-primary dataEndTime">
              数据截止：{{ dataStopYear_balance }}年{{
                dataStopMonth_balance
              }}月
            </div>
          </div>
          <div class="right-bottom-content">
            <!-- <div class="top-tab left-top-tab right-bottom-tab">
              <el-tabs
                v-model="rightBottomActiveName"
                @tab-click="rightBottomHandleClick"
              >
                <el-tab-pane label="当月问题" name="currentMonth"></el-tab-pane>
                <el-tab-pane label="全年问题" name="wholeYear"></el-tab-pane>
              </el-tabs>
              <div class="legend">
                <div class="legend-one">
                  <div class="legend-block legend-one-block"></div>
                  <div class="legend-one-text">未处理</div>
                </div>
                <div class="legend-two">
                  <div class="legend-block legend-two-block"></div>
                  <div class="legend-one-text">已通报</div>
                </div>
                <div class="legend-three">
                  <div class="legend-block legend-three-block"></div>
                  <div class="legend-one-text">已反馈</div>
                </div>
                <div class="legend-four">
                  <div class="legend-block legend-four-block"></div>
                  <div class="legend-one-text">已退回</div>
                </div>
              </div>
            </div> -->
            <!-- <div class="right-bottom-bar">
              <div class="bar-three-part">
                <div class="bar-part-one">
                  <div v-if="rightBottomActiveName == 'currentMonth'">
                    <span v-if="unUseOfMonth > 0">{{ unUseOfMonth }}</span>
                  </div>
                  <div v-else>
                    <span v-if="unUseOfYear > 0">{{ unUseOfYear }}</span>
                  </div>
                </div>
                <div class="bar-part-two">
                  <div v-if="rightBottomActiveName == 'currentMonth'">
                    <span v-if="unFeedbackOfMonth > 0">{{
                      unFeedbackOfMonth
                    }}</span>
                  </div>
                  <div v-else>
                    <span v-if="unFeedbackOfYear > 0">{{
                      unFeedbackOfYear
                    }}</span>
                  </div>
                </div>
                <div class="bar-part-three">
                  <div v-if="rightBottomActiveName == 'currentMonth'">
                    <span v-if="feedbackOfMonth > 0">{{
                      feedbackOfMonth
                    }}</span>
                  </div>
                  <div v-else>
                    <span v-if="feedbackOfYear > 0">{{ feedbackOfYear }}</span>
                  </div>
                </div>
                <div class="bar-part-four">
                  <div v-if="rightBottomActiveName == 'currentMonth'">
                    <span v-if="fourOfMonth > 0">{{ fourOfMonth }}</span>
                  </div>
                  <div v-else>
                    <span v-if="fourOfYear > 0">{{ fourOfYear }}</span>
                  </div>
                </div>
              </div>
            </div> -->
            <!-- 需求修改后添加的 国库余额区域 -->
            <div class="right-bottom-balance">
              <div
                  class="right-bottom-balance-item"
                  v-for="(item, index) in balanceData"
                  :key="index"
              >
                <div class="right-bottom-balance-item-title">
                  <div>{{ item.title }}</div>
                  <div>{{ item.name }}</div>
                </div>
                <div class="right-bottom-balance-item-amount">

                  {{ formatNumberRgx(Number(item.amount / 10000).toFixed(2)) }}
                  {{ item.unit }}
                </div>
              </div>
            </div>

            <!-- 监督预警表格 -->
            <div class="right-bottom-table">
              <div class="top-title">
                <div class="general-title skew-right50">
                  <div class="skew-left50 fs18">监督预警</div>
                </div>
                <div class="skew-right50 btn-general ">
                  <div
                      class="skew-left50 fs16"
                      @click="goToWarnAnalysis"
                      v-if="mapLevel == 0"
                  >
                    查看详情<i class="el-icon-d-arrow-right"></i>
                  </div>
                </div>
                <div class="panorama-primary dataEndTime">
                  数据截止：{{ dataStopYear_warn }}年{{ dataStopMonth_warn }}月
                </div>
              </div>
              <!-- <div class="right-bottom-table-head">
                <div class="panorama-white panorama-bold fs18">监督预警</div>
                <div
                  class="fs16 panorama-primary shou"
                  @click="goToWarnAnalysis"
                  v-limitUser="['overviewInnerPanel:owpwarningListDetails']"
                  v-if='mapLevel == 0'
                >
                  查看详情<i class="el-icon-d-arrow-right"></i>
                </div>
              </div> -->
              <div class="right-bottom-table-content">
                <el-table
                    height="100%"
                    :data="tableData"
                    style="width: 100%"
                    :row-style="getRowClass"
                    :cell-style="getRowClass"
                    tooltip-effect="light"
                    @row-click="checkWarnDetail"
                >
                  <el-table-column
                      label="序号"
                      type="index"
                      width="60"
                      align="center"
                  ></el-table-column>
                  <el-table-column
                      prop="warnLevel"
                      label="级别"
                      min-width="8%"
                      align="center"
                      :show-overflow-tooltip="true"
                  >
                    <template slot-scope="scope">
                      <img class="warn-img" :src="scope.row.warnImg"/>
                      <!-- <img style="width:16px;height:16px;border:none;" src="../../../assets/images/overviewInnerPanel/warn1.png" alt=""> -->
                      {{ scope.row.warnLevel }}
                    </template>
                  </el-table-column>
                  <el-table-column
                      prop="warnObject"
                      label="预警对象"
                      min-width="21%"
                      align="center"
                      :show-overflow-tooltip="true"
                  >
                  </el-table-column>
                  <el-table-column
                      prop="createTime"
                      label="预警日期"
                      min-width="14%"
                      align="center"
                      :show-overflow-tooltip="true"
                  >
                    <template slot-scope="scope">
                      {{ scope.row.createTime }}
                    </template>
                  </el-table-column>
                  <!-- </el-table-column> -->
                </el-table>
              </div>
            </div>
          </div>
        </div>

        <!-- 下穿到2级地图的转移支付 -->
        <div class="right-bottom border-dark-blue-wide" v-if="mapLevel !== 0">
          <div class="top-title">
            <div class="general-title skew-right50">
              <div class="skew-left50 fs18">转移支付</div>
            </div>
            <div class="btn-general skew-right50">
              <!-- <div
                class="skew-left50 fs16"
                @click="goToTransferPayment"
                v-limitUser="['overviewInnerPanel:owpTransferpaymentDetails']"
                v-if="mapLevel == 1"
              >
                查看详情<i class="el-icon-d-arrow-right"></i>
              </div> -->
            </div>
            <div class="panorama-primary dataEndTime">
              数据截止：2021年12月
            </div>
          </div>
          <div class="top-tab left-top-tab distinct-payment-tab">
            <!-- <el-tabs
              v-model="transPaymentActiveName"
              @tab-click="transPaymentHandleClick"
            >
              <el-tab-pane
                label="一般性转移支付"
                name="一般性转移支付"
              ></el-tab-pane>
              <el-tab-pane
                label="专项转移支付"
                name="专项转移支付"
              ></el-tab-pane>
            </el-tabs> -->
            <div class="distinct-tab-content">
              <div v-if="disctinceTabData.length == 0" class="empty">
                暂无数据
              </div>
              <div
                  v-else
                  v-for="(item, index) in disctinceTabData"
                  :key="index"
              >
                <!-- <div class="fs18 panorama-primary tab-data-title">
                  {{ item.name }}
                </div> -->
                <div class="panorama-flex">
                  <div class="tab-data-item">
                    <div class="fs14 panorama-white">省级专项转移支付名称</div>
                    <!-- <div class="fs16 panorama-primary panorama-bold">
                      省级财力
                    </div> -->
                    <div class="fs16 panorama-primary panorama-bold">
                      {{ item.TRANSFERPAYMENTNAME }}
                    </div>
                  </div>
                  <div class="tab-data-item">
                    <div class="fs15 panorama-white">下达文号</div>

                    <div class="fs16 panorama-primary panorama-bold">
                      {{ item.ISSUEDDOCUMENTNUMBER }}
                    </div>
                  </div>
                  <div class="tab-data-item">
                    <div class="fs15 panorama-white">预算金额</div>
                    <div class="fs16 panorama-primary panorama-bold">
                      {{ formatNumberRgx(item.BUDGETAMOUNT) }}万元
                    </div>
                  </div>

                  <!-- <div class="tab-data-item">
                    <div class="fs15 panorama-white">接收百分比</div>
                    <div class="fs24 panorama-primary panorama-bold">
                      {{ toPercent(item.imp_schedule) }}
                    </div>
                  </div> -->
                </div>
                <div class="tab-data-dash"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- </div> -->
  </div>
</template>

<script>
import liquidFill from "@/components/liquidFill";
import Process from "@/components/Process";
import {graphic} from "echarts";
import {mapDetail} from "./mapDetail.js";
import {barChartDetail} from "./barChartDetail";
import {getBIDataSet} from "@/request/common/common";
import {
  QueryWarnRecords,
  GetNum,
} from "@/views/preWarningRecord/request/index.js";
import {
  GetYear
} from "@/views/preWarningAnalysis/requests/index.js"
import screenfull from "screenfull";
import {sortBy, cloneDeep} from "lodash";
import {
  getTableYearAndAsDate,
  NumberToChinese,
  valueIsBlank
} from "@/common/js/util";
import Request from "@/common/net/request.js";
import {formatNumberRgx} from "@/common/utils/base";

const request = new Request();
export default {
  components: {
    liquidFill,
    Process,
  },
  data() {
    return {
      //当前地图层
      // mapLevel: 0, // 1代表省 1代表市州 2代表区县
      mapLevel: 0, //
      mapNameArr: ["泸州市"], //点击的地图区域的市区名字[省，市州，区县],作为返回上级时使用
      // level0NameArr:['四川省'],
      level1NameArr: [
        "江阳区",
        "纳溪区",
        "龙马潭区",
        "泸县",
        "合江县",
        "叙永县",
        "古蔺县",
      ], //江阳区，纳溪区，龙马潭区，泸县，合江县，叙永县，古蔺县

      //当前账号是什么地区的账号
      // currentAccountAuth: "四川省",
      currentAccountAuth: "泸州市",
      areaNo: 0, //0代表四川省 1代表自贡
      isFullscreen: false,
      dataStopYear: new Date().getFullYear(),
      dataStopMonth: new Date().getMonth() + 1,
      //地图区域
      mapChart: null, //echart地图对象
      currentTime: "",
      mapOption: {
        // alwaysShowContent: true,
        // 提示框，鼠标移入
        tooltip: {
          // show: function(data) {
          // 	console.log(data);
          // 	return data.in_generalPublic_total !== undefined;
          // },
          trigger: "item",
          backgroundColor: "#0e213e",
          borderColor: "#00eeff",
          padding: 0,
          enterable: true,
          confine: true, //让tooltip超出页面时不被隐藏
          renderMode: "html", //实现动画必须设置
          // appendToBody: true, //实现动画必须设置
          className: "animation",
          noDataLoadingOption: {
            text: "无数据",
            effect: "bubble",
            effectOption: {
              effect: {
                n: 0,
              },
            },
          },
          formatter: mapDetail,
        },

        toolbox: {
          show: false,
        },
        series: [
          {
            name: "sichuanMap",
            type: "map",
            map: "sichuan",
            //图形上的文本标签，可用于说明图形的一些数据信息
            label: {
              normal: {
                show: true, //显示省份标签
                textStyle: {
                  color: "#fff",
                }, //省份标签字体颜色
              },
              emphasis: {
                //对应的鼠标悬浮效果
                show: true,
                textStyle: {
                  color: "#FFF",
                },
              },
            },
            itemStyle: {
              //地图区域的多边形 图形样式。
              normal: {
                borderWidth: 2, //区域边框宽度
                borderColor: "#46E3FD", //区域边框颜色
                areaColor: "#183E7B", //区域颜色
                shadowOffsetX: 5,
                shadowOffsetY: 5,
                shadowBlur: 14,
                shadowColor: "#00A2FF",
              },
              emphasis: {
                borderWidth: 1,
                borderColor: "#0FA3EF",
                areaColor: new graphic.LinearGradient(0, 0, 0, 1, [
                  {offset: 1, color: "#183E7B"},
                  {offset: 0, color: "#0FA3EF"},
                ]),
              },
            },
            select: {
              //选中区域的设置
              label: {color: "#FFF"},
              itemStyle: {
                areaColor: "#0FA3EF",
              },
            },
            zoom: 1, //放大比例
            // aspectScale: 1 //长宽比
            //设置默认显示区域
            data: [
              {
                name: "泸州市",
                // selected: true
                in_generalPublic_total: 3423423,
                in_generalPublic_current: 3423423,
                in_generalPublic_ratio: 3423423,
                out_generalPublic_total: 3423423,
                out_generalPublic_current: 3423423,
                out_generalPublic_ratio: 3423423,
                in_govFund_total: 3423423,
                in_govFund_current: 3423423,
                in_govFund_ratio: 3423423,
                out_govFund_total: 3423423,
                out_govFund_current: 3423423,
                out_govFund_ratio: 3423423,
                in_state_total: 3423423,
                in_state_current: 3423423,
                in_state_ratio: 3423423,
                out_state_total: 3423423,
                out_state_current: 3423423,
                out_state_ratio: 3423423,
                in_social_total: 3423423,
                in_social_current: 3423423,
                in_social_ratio: 3423423,
                out_social_total: 3423423,
                out_social_current: 3423423,
                out_social_ratio: 3423423,
              },
            ],
          },
          1,
        ],
      },
      mapChartDatafromBI: [],
      BIArr: [], //从BI获取的轮播数据
      mapSliderOpt: {},

      //左上区域 四本预算执行进度
      leftTopActiveName: "一般公共预算",
      budgetProcessDatafromBI: [],
      budgetProcessData: [
        {
          title: "全市收入",
          yearStart: 0,
          adjust: 0,
          excute: 0,
          percentage: 0,
          compare: 0,
        },
        {
          title: "全市支出",
          yearStart: 0,
          adjust: 0,
          excute: 0,
          percentage: 0,
          compare: 0,
        },
        {
          title: "市级收入",
          yearStart: 0,
          adjust: 0,
          excute: 0,
          percentage: 0,
          compare: 0,
        },
        {
          title: "市级支出",
          yearStart: 0,
          adjust: 0,
          excute: 0,
          percentage: 0,
          compare: 0,
        },
      ],
      insideText: "执行进度",
      //左下区域 折柱混合
      barChart: null, //echart柱图对象
      barChartDatafromBI: {},
      barChartSelectValue: "GDP",
      barChartYearList: [], // 年度
      barChartSelectOptions: [
        {
          value: "GDP",
          label: "GDP",
        },
        {
          value: "CPI",
          label: "CPI",
        },
        {
          value: "PPI",
          label: "PPI",
        },
      ],
      barChartOption: {
        color: [
          new graphic.LinearGradient(0, 0, 0, 1, [
            {offset: 1, color: "#183E7B"},
            {offset: 0, color: "#0FA3EF"},
          ]),
          "#E2C948",
        ],
        tooltip: {
          trigger: "axis",
          position: "top",
          // alwaysShowContent: true,
          backgroundColor: "#0e213e",
          borderColor: "#00eeff",
          axisPointer: {
            type: "cross",
            crossStyle: {
              color: "#E2C948",
            },
          },
          // appendToBody: true,
          confine: true, //让tooltip超出页面时不被隐藏
          formatter: barChartDetail,
        },
        toolbox: {
          show: false,
        },

        label: {
          show: true,
          color: "#00EEFF",
        },
        xAxis: [
          {
            type: "category",
            axisTick: {
              alignWithLabel: true,
            },
            data: ["第一季度", "第二季度", "第三季度", "第四季度"],
            axisLabel: {
              textStyle: {
                color: "#00EEFF",
              },
            },
            axisLine: {
              show: true,
              lineStyle: {
                color: "#00EEFF",
              },
            },
          },
        ],
        yAxis: [
          {
            type: "value",
            axisLabel: {
              interval: 0,
            },
            axisLine: {
              show: true,
              lineStyle: {
                color: "#00EEFF",
              },
            },
          },
          {
            type: "value",
            axisLabel: {
              interval: 0,
            },
            axisLine: {
              show: false,
              lineStyle: {
                color: "#00EEFF",
              },
            },
            axisTick: {
              show: false,
            },
            show: false,
          },
        ],
        grid: {
          //调整图表周围空白
          left: 55, //解决Y轴数据太长无法显示的问题
          top: 20,
          right: 20,
          bottom: 30,
        },
        series: [
          //柱状图的值
          {
            name: "thisyear",
            type: "bar",
            data: [{value: 0}, {value: 0}, {value: 0}, {value: 0}],
            barWidth: 40, //柱图宽度
          },
          //折线图的值
          {
            name: "lastyear",
            type: "line",
            yAxisIndex: 1,
            label: {show: false}, //不显示折线图数字
            data: [0, 0, 0, 0],
          },
        ],
      },
      barTotalAmount: 10500,
      barSeriesData: [{value: 0}, {value: 0}, {value: 0}, {value: 0}],
      lineSeriesData: [0, 0, 0, 0],

      //右上区域(政府债务情况)
      govDebtsYearList: [],
      govDebtsMonthList: [],
      govDebtsDatafromBI: [],
      govDebtsData: [
        //渲染页面的数据
        {
          area_type: "全市",
          area_limit: 0,
          area_rest: 0,
          debat_rate: 0,
        },
        {
          area_type: "市级",
          area_limit: 0,
          area_rest: 0,
          debat_rate: 0,
        },
      ],
      //右中区域
      netProbfromBI: {},
      yearUnUseRatio: 0,
      yearUnFeedbackRatio: 0,
      yearFeedbackRatio: 0,
      yearFourRatio: 0,
      monthUnUseRatio: 0,
      monthUnFeedbackRatio: 0,
      monthFeedbackRatio: 0,
      monthFourRatio: 0,
      unUseOfYear: 0,
      unFeedbackOfYear: 0,
      feedbackOfYear: 0,
      fourOfYear: 0,
      unUseOfMonth: 0,
      unFeedbackOfMonth: 0,
      feedbackOfMonth: 0,
      fourOfMonth: 0,

      //右下区域 预警
      earlyWarnYearList: [], // 年度（查询参数）
      earlyWarnMonthList: [], // 月份
      tableDatafromBI: [],
      tableData: [],
      rightBottomActiveName: "currentMonth",
      dataStopYear_warn: '',
      dataStopMonth_warn: '',

      //需求修改后添加的国库余额区域
      balanceYearList: [],
      balanceMonthList: [],
      dataStopYear_balance: '',
      dataStopMonth_balance: '',
      balanceData: [
        {title: "期初", name: "库款余额", amount: 0, unit: "亿元"},
        {title: "期末", name: "库款余额", amount: 0, unit: "亿元"},
        {title: "本期", name: "库款流入", amount: 0, unit: "亿元"},
        {title: "本期", name: "库款流出", amount: 0, unit: "亿元"},
      ],

      //地区面板右下区域
      transPaymentActiveName: "一般性转移支付",
      distinctTransferPaymentfromBI: [],
      disctinceTabData: [],
      leftTopStopYearList: [],
      leftTopStopYear: '',
      leftTopDataStopMonth: '',
      dataStopYear_zhengfu: '',
      dataStopMonth_zhengfu: '',
    };
  },
  computed: {
    leftTopStopMonList() {
      const monList = []
      if (['一般公共预算', '政府性基金预算'].includes(this.leftTopActiveName)) {
        for (let num = 1; num < 13; num++) {
          monList.push({
            name: `${num}月`,
            value: num.toString()
          })
        }
      } else {
        for (let num = 1; num < 5; num++) {
          monList.push({
            name: `第${NumberToChinese(num)}季度`,
            value: `第${num}季度`
          })
        }
      }
      return monList
    }
  },
  async created() {
    // 获取左上区域数据 四本预算执行进度 后台真实数据 9c6a74913cc54872a04ec81b9b27f7ef
    this.budgetProcessDatafromBI = [];
    this.budgetProcessDatafromBI = await getBIDataSet({
      dataId: "9c6a74913cc54872a04ec81b9b27f7ef",
      pageNum: 1,
      pageSize: 99999,
    });
    this.budgetProcessDatafromBI = this.budgetProcessDatafromBI.page;
    // 处理年度
    const yearArr = [...this.budgetProcessDatafromBI].map(item => {
      if (!valueIsBlank(item.YEAR_NUM)) return item.YEAR_NUM
    })
    this.leftTopStopYearList = [...new Set(yearArr)].sort((a, b) => b - a)
    this.getBudgetProcessData(this.budgetProcessDatafromBI);

    //获取柱形图区域数据 宏观经济运行指标
    this.barChartDatafromBI = [];
    this.barChartDatafromBI = await getBIDataSet({
      dataId: "30342d7abc3c4694b93da860f9844ce6",
      pageNum: 1,
      pageSize: 99999,
    });
    this.barChartDatafromBI = this.barChartDatafromBI.page;
    // 处理时间
    // 年度选择范围
    this.barChartYearList = [...new Set(
        cloneDeep(this.barChartDatafromBI)
            .map(item => {
              return item.YEAR_NUM
            })
    )].sort((a, b) => Number(b) - Number(a))
    if (this.barChartYearList.length)
      this.dataStopYear = this.barChartYearList[0]
    this.getBarChartData(this.barChartDatafromBI);

    //获取地图区域数据
    this.mapChartDatafromBI = [];
    this.mapChartDatafromBI = await getBIDataSet({
      dataId: "ec18f95ec1904560a863dcbadc0c3ea0",
      pageNum: 1,
      pageSize: 99999,
    });
    this.mapChartDatafromBI = this.mapChartDatafromBI.page;
    this.getMapChartData(this.mapChartDatafromBI);

    //获取右上区域数据 政府债务
    let res_zhengfu = await getTableYearAndAsDate({
      tableName: "yjs_yrw_202109221634",
    });
    this.govDebtsYearList = res_zhengfu.year
    if (this.govDebtsYearList.length) {
      for (let i = 1; i < 13; i++) {
        this.govDebtsMonthList.push({
          name: `${i}月`,
          value: i
        })
      }
    }
    this.dataStopYear_zhengfu = res_zhengfu.deadlineYear;
    this.dataStopMonth_zhengfu = res_zhengfu.deadlineMonth;
    this.govDebtsDatafromBI = [];
    this.govDebtsDatafromBI = await getBIDataSet({
      dataId: "9aa18d29d9184727a78f6169d139cd8e",
      pageNum: 1,
      pageSize: 99999,
    });
    this.govDebtsDatafromBI = this.govDebtsDatafromBI.page;
    console.log("this.govDebtsDatafromBI获取", this.govDebtsDatafromBI);
    this.getGovDebtsData(this.govDebtsDatafromBI);

    //获取右中区域 联网监督问题分析
    // this.netProbfromBI = [];
    // this.netProbfromBI = await getBIDataSet({
    //   dataId: "014c710355a145abae99f16c18f3db4c",
    //   pageNum: 1,
    //   pageSize: 1000,
    // });
    // this.netProbfromBI = this.netProbfromBI.page;
    // this.getNetProbData(this.netProbfromBI);

    //获取右下区域 预警清单
    /* this.tableDatafromBI = [];
    this.tableDatafromBI = await getBIDataSet({
      dataId: '1764ce5c5f464ea3bffde782807eece3',
      pageNum: 1,
      pageSize: 1000
    });
    this.tableDatafromBI = this.tableDatafromBI.page; */

    //获取国库余额数据
    // 获取年度
    const area = '全市'
    await getTableYearAndAsDate({
      city: "",
      customField: `AREA_ID='${area}'`,
      dataType: "",
      special: "",
      tableName: "YJS_YRW_202112281637",
      versionId: "",
    }).then(res => {
      let {year, deadlineMonth, deadlineYear} = res;
      this.balanceYearList = year.map((item) => {
        return {
          label: item,
          value: item
        };
      });
      if (this.balanceYearList.length) {
        for (let i = 1; i < 13; i++) {
          this.balanceMonthList.push({
            name: `${i}月`,
            value: `${i}`
          })
        }
      }
      this.dataStopYear_balance = deadlineYear
      this.dataStopMonth_balance = deadlineMonth
    })
    this.getBalanceData();

    // 获取右下区域 预警数据
    await GetYear().then(res => {
      if (res.data && res.data.length) {
        // 年份先降序
        res.data.sort((a, b) => {
          return Number(b) - Number(a)
        }).forEach(item => {
          this.earlyWarnYearList.push({
            name: item,
            vaule: item
          })
        })
        this.dataStopYear_warn = this.earlyWarnYearList[0].value
        for (let i = 1; i < 13; i++) {
          this.earlyWarnMonthList.push({
            name: `${i}月`,
            value: i
          })
        }
      } else {
        this.dataStopYear_warn = ''
        this.dataStopMonth_warn = ''
      }
    })
    this.getWarnData();

    //获取地区转移支付数据
    this.distinctTransferPaymentfromBI = [];
    this.distinctTransferPaymentfromBI = await getBIDataSet({
      dataId: "9eda5122fbf748d984c9d487dca0d54a",
      pageNum: 1,
      pageSize: 99999,
    });
    this.distinctTransferPaymentfromBI = this.distinctTransferPaymentfromBI.page;
    this.getDistinctTransferPaymentData(this.distinctTransferPaymentfromBI);
  },

  mounted() {
    //时钟每秒变化一次
    setInterval(this.fnDate, 1000); //注意第一个参数是函数表达式，不要加（）
    //全屏
    window.addEventListener("fullscreenchange", (e) => {
      if (screenfull.isFullscreen) {
        console.log("screenfull.isFullscreen", screenfull.isFullscreen);
        this.isFullscreen = true;
      } else {
        console.log("screenfull.isFullscreen", screenfull.isFullscreen);
        this.isFullscreen = false;
      }
      //重绘echart图
      this.$nextTick(() => {
        this.barChart.resize();
        this.mapChart.resize();
      });
    });
    this.drawMapChart(this.mapOption);
    this.drawBarChart(this.barChartOption);
  },
  beforeDestroy() {
  },
  methods: {
    //js 获取当前时间
    fnDate() {
      let date = new Date();
      let year = date.getFullYear(); //当前年份
      let month = date.getMonth(); //当前月份
      let data = date.getDate(); //天
      let hours = date.getHours(); //小时
      let minute = date.getMinutes(); //分
      let second = date.getSeconds(); //秒
      let day = date.getDay(); //星期
      let weeks = new Array(
          "星期日",
          "星期一",
          "星期二",
          "星期三",
          "星期四",
          "星期五",
          "星期六"
      );
      let week = weeks[day];
      this.currentTime =
          year +
          "-" +
          this.fnW(month + 1) +
          "-" +
          this.fnW(data) +
          " " +
          week +
          " " +
          this.fnW(hours) +
          ":" +
          this.fnW(minute) +
          ":" +
          this.fnW(second);
    },
    //补位 当某个时间字段不是两位数时补0å
    fnW(str) {
      var num;
      str >= 10 ? (num = str) : (num = "0" + str);
      return num;
    },
    //全屏
    toFullscreen() {
      // this.$router.push({ path: '/overviewPanel' });
      // screenfull.request(); // 全屏
      // screenfull.exit(); // 退出全屏
      // screenfull.toggle(); // 全屏切换
      // screenfull.isFullscreen; // 布尔值——当前页面是否全屏
      // screenfull.isEnabled; // 布尔值——当前浏览器是否支持全屏
      this.isFullscreen = true;
      screenfull.toggle(this.$refs.inner);
      this.$forceUpdate()
    },
    //退出全屏
    cancelFullScreen() {
      if (this.$route.query.isFullscreen == "true") {
        this.$router.push({
          path: "/pageMenu",
        });
      }
      screenfull.exit();
    },

    //页面跳转
    goToAllTaskView() {
      this.$router.push({path: "/allTaskView"});
    },
    //四本预算
    goToExecutionAnalysis() {
      this.$router.push({
        path: "/executionAnalysis",
        query: {
          year: this.leftTopStopYear,
          name: this.currentAccountAuth === "泸州市" ?
              "全市" : this.currentAccountAuth,
          specialId: this.leftTopActiveName,
          mon: this.leftTopDataStopMonth,
        },
      });
    },
    //宏观经济
    goToMacroscopicNorm() {
      this.$router.push({
        path: "/macroscopicNorm",
        query: {
          year: this.dataStopYear,
          name: this.currentAccountAuth,
        },
      });
    },
    //政府债务
    goToDeptAnalysis() {
      this.$router.push({
        path: "/deptBudget",
        query: {
          year: this.dataStopYear_zhengfu,
          name:
              this.currentAccountAuth === "泸州市"
                  ? "全市"
                  : this.currentAccountAuth,
        },
      });
    },
    //部门预算
    goToDepartmentSummary() {
      this.$router.push({
        path: "/departmentSummary",
        query: {
          year: this.dataStopYear,
          name: this.currentAccountAuth,
        },
      });
    },
    //转移支付
    goToTransferPayment() {
      this.$router.push({
        year: this.dataStopYear,
        path: "/transferPayment",
        query: {
          name: this.currentAccountAuth,
          year: this.dataStopYear,
        },
      });
    },
    //专题监督
    goToSpecialAll() {
      this.$router.push({
        path: "/special/regular",
        query: {
          year: this.dataStopYear,
          name: this.currentAccountAuth,
        },
      });
    },
    //地区面板的跳转
    //跳转上级
    goToUpprerAuth() {
      this.mapLevel--;
      console.log("this.mapLevel", this.mapLevel);
      this.mapNameArr.pop();
      console.log("this.mapNameArr", this.mapNameArr);
      this.currentAccountAuth = this.mapNameArr[this.mapLevel];
    },
    //联网入口
    goToHookup() {
      this.$message.info("开发中");
    },

    //市州页面按钮跳转
    goToResourceFile(para) {
      this.$router.push({
        path: "/serviceDataInfo",
        query: {
          name: para,
          year: this.dataStopYear,
          map: this.currentAccountAuth,
          from: "QJJK",
        },
      });
    },

    leftTopHandleClick(tab, event) {
      //根据tab筛选
      this.getBudgetProcessData(this.budgetProcessDatafromBI);
    },
    rightBottomHandleClick(tab, event) {
      // console.log(tab, event);
      this.getNetProbData(this.netProbfromBI);
    },
    drawMapChart(opt) {
      console.log(opt);
      //注册地图
      //注意require变量动态赋值的用法
      let mapJson = require(`./panoramaMaps/` +
          `${this.currentAccountAuth}` +
          `.json`);
      this.$echarts.registerMap("sichuan", mapJson);
      // 基于准备好的dom，初始化echarts实例 配置离线地图
      this.mapChart = this.$echarts.init(this.$refs.mapChart);
      // 绘制图表
      this.mapChart.setOption(opt);
      //添加click事件
      //.off避免地图点击事件多次触发
      this.mapChart.off("click").on("click", (result) => {
        console.log("地图点击了", result.name);
        this.currentAccountAuth = result.name;
        console.log("this.currentAccountAuth", this.currentAccountAuth);
        // this.mapLevel++;
        this.checkLevel(result.name);
        console.log("this.mapLevel", this.mapLevel);
        this.mapNameArr[this.mapLevel] = result.name;
        console.log("this.mapNameArr", this.mapNameArr);
      });
    },
    drawBarChart(opt) {
      this.barChart = this.$echarts.init(this.$refs.barChart);
      // barChart.resize();
      // 绘制图表
      this.barChart.setOption(opt);
    },
    //修改el-table背景
    getRowClass({row, column, rowIndex, columnIndex}) {
      return "background-color:#0E213E;padding: 0.1rem 0;";
    },
    /**
     * 数据处理 左上区域 四本预算执行进度
     * @param arr 需要处理数据
     * @param isTimeQ 是否用选择的时间进行筛选 默认为false
     */
    //
    getBudgetProcessData(arr, isTimeQ = false) {
      console.log("四本预算执行进度 this.budgetProcessDatafromBI", arr);
      let that = this;

      //获取每个图的数据
      function getTemp(currentValue) {
        console.log(currentValue, 'currentValue')
        let temp = {};
        if (currentValue.BUDGETALLBYCOLUMN) {
          temp.yearStart = currentValue.BUDGETALLBYCOLUMN;
        }
        if (currentValue.NEWBUDGETALLBYCOLUMN)
          temp.adjust = currentValue.NEWBUDGETALLBYCOLUMN;
        if (currentValue.NUMBEROFEXECUTIONS)
          temp.excute = currentValue.NUMBEROFEXECUTIONS;
        if (
            currentValue.NUMBEROFEXECUTIONS &&
            currentValue.ADJUSTED_BUDGET_AND_BUDGET
        )
          temp.percentage =
              currentValue.NUMBEROFEXECUTIONS /
              currentValue.ADJUSTED_BUDGET_AND_BUDGET;
        if (currentValue.COMPARED_SAME)
          temp.compare = currentValue.COMPARED_SAME.toFixed(2);
        console.log(temp, 'temp')
        return temp;
      }

      //过滤数据
      let filteredData = [];
      // console.log(arr)
      // console.log('_________________end_________________')
      filteredData = arr.filter((currentValue) => {
        //如果是四川省，就要拿四川省和四川省级的 如果是市，就要拿市和市级的
        //判断几级
        switch (that.mapLevel) {
          case 0:
            return (
                currentValue.DATA_SOURCES == "0" &&
                currentValue.DATA_TYPE == "执行" &&
                (isTimeQ ? (currentValue.YEAR_NUM == this.leftTopStopYear && currentValue.YEAR_MON == this.leftTopDataStopMonth) : true) &&
                currentValue.SPECIAL_ID === that.leftTopActiveName &&
                (currentValue.AREA_ID == "全市" || currentValue.AREA_ID == "市级")
            );
            break;
          case 1:
            // this.mapNameArr.includes(currentValue.PARENT_AREA_ID) &&
            return (
                currentValue.DATA_SOURCES == "0" &&
                currentValue.DATA_TYPE == "执行" &&
                (isTimeQ ? (currentValue.YEAR_NUM == this.leftTopStopYear && currentValue.YEAR_MON == this.leftTopDataStopMonth) : true) &&
                currentValue.SPECIAL_ID === that.leftTopActiveName &&
                ['全市', this.currentAccountAuth].includes(currentValue.AREA_ID)
            );
            break;
        }
      });
      filteredData = filteredData.filter(item => {
        if (['一般公共预算', '政府性基金预算'].includes(this.leftTopActiveName)) {
          return item.YEAR_MON.indexOf('季度') === -1
        }
        return item.YEAR_MON.indexOf('季度') !== -1
      })
      // console.log("过滤后的四本", filteredData);
      filteredData = sortBy(filteredData, ["YEAR_NUM", "YEAR_MON"]);
      if (!isTimeQ) {
        if (filteredData.length) {
          let maxData = undefined
          if (that.mapLevel == 0) {
            maxData = cloneDeep(filteredData[filteredData.length - 1])
          } else {
            filteredData.forEach(itemM => {
              if (that.currentAccountAuth == itemM.AREA_ID) {
                maxData = cloneDeep(itemM)
              }
            })
            if (!maxData) maxData = cloneDeep(filteredData[filteredData.length - 1])
          }
          that.leftTopStopYear = maxData.YEAR_NUM
          that.leftTopDataStopMonth = maxData.YEAR_MON
          // 只要最新的数据
          filteredData = filteredData.filter(currentValue => {
            return currentValue.YEAR_NUM == that.leftTopStopYear && currentValue.YEAR_MON == that.leftTopDataStopMonth
          })
        } else {
          that.leftTopStopYear = '';
          that.leftTopDataStopMonth = '';
        }
      }
      console.log("过滤后的四本", filteredData);
      that.budgetProcessData.forEach((item) => {
        item.yearStart = 0;
        item.adjust = 0;
        item.excute = 0;
        item.percentage = 0;
        item.compare = 0;
      });
      filteredData.map((currentValue) => {
        //判断tab的值 四个图的title区分
        //区分是省/市本级还是全市/市
        if (currentValue.AREA_ID === '全市') {
          if (currentValue.INCOME_PAY_ID == "收入") {
            Object.assign(that.budgetProcessData[0], getTemp(currentValue));
          } else {
            Object.assign(that.budgetProcessData[1], getTemp(currentValue));
          }
        } else {
          if (currentValue.INCOME_PAY_ID == "收入") {
            Object.assign(that.budgetProcessData[2], getTemp(currentValue));
          } else {
            Object.assign(that.budgetProcessData[3], getTemp(currentValue));
          }
        }
      });
      console.log("四本数据that.budgetProcessData", that.budgetProcessData);
    },
    //数据处理 左下区域 宏观经济运行指标
    getBarChartData(arr) {
      console.log("宏观经济运行指标", arr);
      let that = this;

      //获取每个柱图的数据
      function getBarTemp(currentValue) {
        let temp = {};
        (temp.value = Math.round(currentValue["CATEGORY_INCOME"])),
            (temp.compared_same = (currentValue.CATEGORY_RATE || 0) * 100),
            (temp.type = currentValue.INDICATOR_TYPE);
        return temp;
      }

      //根据季度把节点数据放入数组
      function getBar(selectedArr) {
        let finalData = [];
        selectedArr.map((currentValue) => {
          switch (currentValue.QUARTER) {
            case "1": {
              finalData[0] = getBarTemp(currentValue);
              break;
            }
            case "2": {
              finalData[1] = getBarTemp(currentValue);
              break;
            }
            case "3": {
              finalData[2] = getBarTemp(currentValue);
              break;
            }
            case "4": {
              finalData[3] = getBarTemp(currentValue);
              break;
            }
          }
        });
        return finalData;
      }

      let currentYearData = arr.filter((item) => {
        //根据地图层级做判断
        switch (that.mapLevel) {
          case 0:
            return (
                item.AREA_ID == "全市" &&
                item.YEAR_NUM == that.dataStopYear &&
                item.INDICATOR_TYPE === that.barChartSelectValue
            );
            break;
          case 1:
            return (
                item.PARENT_AREA_ID == that.mapNameArr[1] &&
                item.AREA_ID == that.currentAccountAuth &&
                item.YEAR_NUM == that.dataStopYear &&
                item.INDICATOR_TYPE === that.barChartSelectValue
            );
            break;
        }
      });
      console.log("currentYearData", currentYearData);
      this.barSeriesData = getBar(currentYearData);
      console.log("=========this.barSeriesData", this.barSeriesData);

      let previousYearData = arr.filter((item) => {
        return (
            item.AREA_ID == "市" &&
            item.YEAR_NUM == this.dataStopYear - 1 &&
            item.INDICATOR_TYPE === this.barChartSelectValue
        );
      });
      console.log("previousYearData", previousYearData);
      // this.lineSeriesData = getBar(previousYearData);
      this.lineSeriesData = getBar(currentYearData);
      console.log("this.lineSeriesData", this.lineSeriesData);
      this.lineSeriesData = this.lineSeriesData.map((item) => {
        item.value = item.compared_same;
        return item;
      });
      //给柱状图赋值
      let opt = {
        series: [
          //柱状图的值
          {
            data: this.barSeriesData,
          },
          {data: this.lineSeriesData},
        ],
      };

      this.drawBarChart(opt);
    },
    //地图区域数据处理
    getMapChartData(arr) {
      //获取每个区域地图的数据
      let that = this;
      console.log("地图的数据", arr);
      // let BIArr = [];
      that.groupBy(arr, "AREA_ID").map((currentValue, index) => {
        let obj = {};
        currentValue.map((item) => {
          // console.log(item)
          let key = "";
          if (item.INCOME_PAY_ID == "收入") key += "in";
          else key += "out";
          if (item.SPECIAL_ID == "一般公共预算") key += "_generalPublic_";
          else if (item.SPECIAL_ID == "政府性基金预算") key += "_govFund_";
          else if (item.SPECIAL_ID == "国有资本经营预算") key += "_state_";
          else if (item.SPECIAL_ID == "社保基金预算") key += "_social_";
          obj["name"] = item.AREA_ID;
          // obj['area']=item.
          obj[key + "total"] =
              formatNumberRgx(
                  Number(item._336958360807018504 / 10000).toFixed(2)
              ) || 0;
          obj[key + "current"] =
              formatNumberRgx(
                  Number(item._336958360807018501 / 10000).toFixed(2)
              ) || 0;
          obj[key + "ratio"] = Number(item.IMP_SCHEDULE * 100).toFixed(2);
          return obj;
        });
        this.BIArr[index] = obj;
      });

      //给地图赋值
      this.mapSliderOpt = {
        series: [
          {
            data: this.BIArr,
          },
        ],
      };
      //重绘地图
      that.drawMapChart(this.mapSliderOpt);
    },
    //右上区域 政府债务情况
    getGovDebtsData(arr) {
      console.log("政府债务情况this.govDebtsDatafromBI", arr);
      let a = arr.filter((currentValue) => {
        switch (this.mapLevel) {
          case 0:
            return (
                currentValue.PARENT_AREA_ID == this.currentAccountAuth &&
                (currentValue.AREA_ID == "全市" ||
                    currentValue.AREA_ID == "市级") &&
                currentValue.YEAR_NUM == this.dataStopYear_zhengfu &&
                currentValue.YEAR_MON == this.dataStopMonth_zhengfu
            );
            break;
          case 1:
            // 这里返回泸州市本级的和下钻区县的
            return (
                this.mapNameArr.includes(currentValue.PARENT_AREA_ID) &&
                ['全市', this.currentAccountAuth].includes(currentValue.AREA_ID) &&
                currentValue.YEAR_NUM == this.dataStopYear_zhengfu &&
                currentValue.YEAR_MON == this.dataStopMonth_zhengfu
            );
            break;
        }
      });
      console.log(a, 'aaaaaaaaaaaaa');
      // 先清空
      this.$set(this.govDebtsData[0], "area_limit", 0);
      this.$set(this.govDebtsData[0], "area_rest", 0);
      this.$set(this.govDebtsData[1], "area_limit", 0);
      this.$set(this.govDebtsData[1], "area_rest", 0);
      a.map((item) => {
        switch (item.AREA_TYPE) {
          case this.govDebtsData[0].area_type:
            //'全市'或者‘市级'
            this.$set(this.govDebtsData[0], "area_limit", item.AREA_LIMIT);
            this.$set(this.govDebtsData[0], "area_rest", item.AREA_REST);
            // this.$set(this.govDebtsData[0], "debat_rate", item.debat_rate);
            break;
          case this.govDebtsData[1].area_type:
            //'市级'或者‘区县级'
            this.$set(this.govDebtsData[1], "area_limit", item.AREA_LIMIT);
            this.$set(this.govDebtsData[1], "area_rest", item.AREA_REST);
            // this.$set(this.govDebtsData[1], "debat_rate", item.debat_rate);
            break;
        }
      });
      console.log("this.govDebtsData", this.govDebtsData);
    },

    //右中区域 联网问题
    async getNetProbData(arr) {
      // id: "27017555642478340"
      // question_num: 50
      // question_status: "0"
      // unicode: 1
      // year_mon: "5"
      // year_num: "2021"
      /* let year = '2021';
			let month = '5';

			let totalOfYear = arr
				.filter((item) => {
					return item.year_num == year;
				})
				.reduce((sumSoFar, item) => {
					return Number(sumSoFar + Number(item.question_num));
				}, 0);
			// console.log('totalOfYear', totalOfYear);

			let totalOfMonth = arr
				.filter((item) => {
					return item.year_num == year && item.year_mon == month;
				})
				.reduce((sumSoFar, item) => {
					return Number(sumSoFar + Number(item.question_num));
				}, 0);
			// console.log('totalOfMonth', totalOfMonth);

			this.unUseOfYear = arr
				.filter((item) => {
					return item.year_num == year && item.question_status == '0';
				})
				.reduce((sumSoFar, item) => {
					return Number(sumSoFar + Number(item.question_num));
				}, 0);
			// console.log('unUseOfYear', this.unUseOfYear);

			this.unFeedbackOfYear = arr
				.filter((item) => {
					return item.year_num == year && item.question_status == '1';
				})
				.reduce((sumSoFar, item) => {
					return Number(sumSoFar + Number(item.question_num));
				}, 0);
			// console.log('unFeedbackOfYear', this.unFeedbackOfYear);

			this.feedbackOfYear = arr
				.filter((item) => {
					return item.year_num == year && item.question_status == '2';
				})
				.reduce((sumSoFar, item) => {
					return Number(sumSoFar + Number(item.question_num));
				}, 0);
			// console.log('feedbackOfYear', this.feedbackOfYear);

			this.unUseOfMonth = arr.find((item) => {
				return (
					item.year_num == year &&
					item.year_mon == month &&
					item.question_status == '0'
				);
			}).question_num;
			// console.log('unUseOfMonth', this.unUseOfMonth);

			this.unFeedbackOfMonth = arr.find((item) => {
				return (
					item.year_num == year &&
					item.year_mon == month &&
					item.question_status == '1'
				);
			}).question_num;
			// console.log('unFeedbackOfMonth', this.unFeedbackOfMonth);

			this.feedbackOfMonth = arr.find((item) => {
				return (
					item.year_num == year &&
					item.year_mon == month &&
					item.question_status == '2'
				);
			}).question_num;
			// console.log('feedbackOfMonth', this.feedbackOfMonth); */
      /* let date = new Date();
      let year = date.getFullYear();
      let month = date.getMonth() + 1;
      let day = date.getDate();
      let startTime = `${year}-${1}-${1}`;
      let endTime = `${year}-${month}-${day}`;
      let params = {
        type: "0",
        pageNum: 1,
        pageSize: 10,
        endTime,
        startTime,
        statusList: [],
      };
      params.statusList = [0, 3, 5, 6];
      let totalOfYear = await this.getStatusData(params); // 全年总数据
      params.statusList = [0];
      this.unUseOfYear = await this.getStatusData(params); //全年未处理
      params.statusList = [3];
      this.feedbackOfYear = await this.getStatusData(params); //全年已反馈
      params.statusList = [5];
      this.unFeedbackOfYear = await this.getStatusData(params);
      params.statusList = [6];
      this.fourOfYear = await this.getStatusData(params);

      startTime = `${year}-${month}-${1}`;
      params = {
        type: "0",
        pageNum: 1,
        pageSize: 10,
        endTime,
        startTime,
        statusList: [],
      };
      params.statusList = [0, 3, 5, 6];
      let totalOfMonth = await this.getStatusData(params); // 当月总数据
      params.statusList = [0];
      this.unUseOfMonth = await this.getStatusData(params); //当月未使用

      params.statusList = [5];
      this.unFeedbackOfMonth = await this.getStatusData(params);

      params.statusList = [3];
      this.feedbackOfMonth = await this.getStatusData(params);

      params.statusList = [6];
      this.fourOfMonth = await this.getStatusData(params); */

      let date = new Date();
      let year = date.getFullYear();
      let month = date.getMonth() + 1;
      let params = {};
      params.year = [year];
      params.month = [];
      let resData1 = await this.getStatusDatas(JSON.stringify(params));
      this.unUseOfYear = resData1["未处理"]; //全年未处理
      this.unFeedbackOfYear = resData1["已通报"]; //全年已通报
      this.feedbackOfYear = resData1["已反馈"]; //全年已反馈
      this.fourOfYear = resData1["已退回"]; //全年已退回
      let totalOfYear =
          this.unUseOfYear +
          this.unFeedbackOfYear +
          this.feedbackOfYear +
          this.fourOfYear;
      this.year_total = totalOfYear;

      params.month = [month];
      if (month < 10) {
        params.month = ["0" + month];
      }
      let resData2 = await this.getStatusDatas(JSON.stringify(params));
      this.unUseOfMonth = resData2["未处理"]; //当月未处理
      this.unFeedbackOfMonth = resData2["已通报"]; //当月已通报
      this.feedbackOfMonth = resData2["已反馈"]; //当月已反馈
      this.fourOfMonth = resData2["已退回"]; //当月已退回
      let totalOfMonth =
          this.unUseOfMonth +
          this.unFeedbackOfMonth +
          this.fourOfMonth +
          this.feedbackOfMonth;
      this.month_total = totalOfMonth;

      this.yearUnUseRatio = this.unUseOfYear / totalOfYear;
      this.yearUnFeedbackRatio = this.unFeedbackOfYear / totalOfYear;
      this.yearFeedbackRatio = this.feedbackOfYear / totalOfYear;
      this.yearFourRatio = this.fourOfYear / totalOfYear;
      this.monthUnUseRatio = this.unUseOfMonth / totalOfMonth;
      this.monthUnFeedbackRatio = this.unFeedbackOfMonth / totalOfMonth;
      this.monthFeedbackRatio = this.feedbackOfMonth / totalOfMonth;
      this.monthFourRatio = this.fourOfMonth / totalOfMonth;

      console.log("unUseOfYear", this.unUseOfYear);
      console.log("totalOfYear", totalOfYear);
      console.log("unFeedbackOfYear", this.unFeedbackOfYear);
      console.log("feedbackOfYear", this.feedbackOfYear);
      console.log("unFeedbackOfMonth", this.unFeedbackOfMonth);
      console.log("feedbackOfMonth", this.feedbackOfMonth);
      console.log("totalOfMonth", totalOfMonth);
      console.log("unUseOfMonth", this.unUseOfMonth);
      console.log("fourOfMonth", this.fourOfMonth);
      console.log("fourOfYear", this.fourOfYear);

      if (this.rightBottomActiveName == "currentMonth") {
        document.documentElement.style.setProperty(
            "--baronewidth",
            this.monthUnUseRatio * 100 + "%"
        );
        document.documentElement.style.setProperty(
            "--bartwowidth",
            this.monthUnFeedbackRatio * 100 + "%"
        );
        document.documentElement.style.setProperty(
            "--barthreewidth",
            this.monthFeedbackRatio * 100 + "%"
        );
        document.documentElement.style.setProperty(
            "--barfourwidth",
            this.monthFourRatio * 100 + "%"
        );
      } else {
        document.documentElement.style.setProperty(
            "--baronewidth",
            this.yearUnUseRatio * 100 + "%"
        );
        document.documentElement.style.setProperty(
            "--bartwowidth",
            this.yearUnFeedbackRatio * 100 + "%"
        );
        document.documentElement.style.setProperty(
            "--barthreewidth",
            this.yearFeedbackRatio * 100 + "%"
        );
        document.documentElement.style.setProperty(
            "--barfourwidth",
            this.yearFourRatio * 100 + "%"
        );
      }
    },

    //右下区域 预警清单
    getWarningTableData() {
    },

    //地区面板右下 转移支付
    transPaymentHandleClick() {
      //临时修改为前端默认数据
      // if(this.transPaymentActiveName=="一般性转移支付" && this.currentAccountAuth=='成都市')
      // this.disctinceTabData =[{name:'财政金融互动专项资金',docNum:'川财金[2021]0029号',amount:31659.87},
      // {name:'民族事业发展专项资金',docNum:'川财行[2021]0034号',amount:60},
      // {name:'交通专项资金',docNum:'川财建[2021]0094号',amount:6266.2},
      // {name:'文化产业发展专项资金',docNum:'川财教[2021]0104号',amount:2880},
      // {name:'药品监管专项资金',docNum:'川财行[2021]0037号',amount:550},
      // {name:'生态环境保护资金',docNum:'川财资环[2021]0027号',amount:2496.04},
      // {name:'安全生产专项资金',docNum:'川财建[2021]0088号',amount:425},
      // {name:'人民防空建设补助专项资金',docNum:'川财防[2021]0008号',amount:25},
      // {name:'脱贫攻坚一线干部风险保障基金',docNum:'川财行[2021]0133号',amount:25},
      // {name:'工业发展专项资金',docNum:'川财建[2021]0291号',amount:10564},
      // ]
      // else (this.disctinceTabData = [])
      this.getDistinctTransferPaymentData(this.disctinceTabData);
    },
    getDistinctTransferPaymentData(arr) {
      console.log("转移支付数据", arr);
      this.disctinceTabData = arr.filter((item) => {
        //区分一般性转移支付还是专项转移支付
        return (
            item.AREA_ID ==
            this
                .currentAccountAuth /*&& (item.payment_type ==
          this.transPaymentActiveName)*/
        );
      });
      if (this.mapLevel !== 1) this.disctinceTabData = [];
    },
    // 获取预警分状态数据
    async getStatusData(params) {
      let res = await QueryWarnRecords(params).then((res) => {
        return res;
      });
      if (res.data) return res.data.total;
      return 0;
    },

    // xcy 2021/11/11
    goToWarnAnalysis() {
      this.$router.push("/preWarningAnalysis");
    },
    // 获取预警数据
    getWarnData() {
      // 如果年度和月份未空，则不往下走
      if (valueIsBlank(this.dataStopYear_warn) || valueIsBlank(this.dataStopMonth_warn)) {
        return
      }
      this.tableDatafromBI = [];
      let date = new Date();
      let year = this.dataStopYear_warn;
      let month = this.dataStopMonth_warn;
      let day = date.getDate();
      let startTime = `${year}-${1}-${1}`;
      let endTime = `${year}-${month}-${day}`;
      QueryWarnRecords({
        type: "0",
        pageNum: 1,
        pageSize: 10,
        endTime,
        startTime,
      }).then((res) => {
        // console.log('111');
        if (res && res.data) {
          console.log("res.data.list", res.data.list);
          this.tableDatafromBI = res.data.list;
          //处理数据
          this.tableDatafromBI.map((item) => {
            let obj = {};
            obj.warnLevel = item.warnLevel;
            switch (item.warnLevel) {
              case "Ⅰ":
                //动态渲染图片需要用require
                obj.warnImg = require("@/assets/images/overviewInnerPanel/warn1.png");
                break;
              case "Ⅱ":
                obj.warnImg = require("@/assets/images/overviewInnerPanel/warn1.png");
                break;
              case "Ⅲ":
                obj.warnImg = require("@/assets/images/overviewInnerPanel/warn1.png");
                break;
              case "Ⅳ":
                obj.warnImg = require("@/assets/images/overviewInnerPanel/warn1.png");
                break;
            }
            obj.warnObject = item.warnObject;
            obj.createTime = item.createTime.slice(0, 10);
            obj.id = item.id;
            this.tableData.push(obj);
          });
        } else {
          this.tableDatafromBI = [];
          this.tableData = [];
        }
        console.log(this.tableData);
      }),
          (err) => {
            console.error(err);
          };
    },
    // 获取预警分状态数据
    async getStatusDatas(params) {
      let res = await GetNum(params).then((res) => {
        if (res.data) {
          return res.data;
        } else {
          return {
            已办结: 0,
            已反馈: 0,
            已处理: 0,
            已退回: 0,
            已通报: 0,
            未处理: 0,
          };
        }
      });
      return res;
    },

    //右下区域 需求修改后新增的国库余额
    goToBalance() {
      this.$router.push({
        path: "/treasuryAnalysis/monthlyReport",
        query: {
          year: this.dataStopYear_balance,
        },
      });
    },
    //获取国库余额数据
    getBalanceData() {
      if (valueIsBlank(this.dataStopMonth_balance)
          || valueIsBlank(this.dataStopYear_balance)) {
        return
      }
      request
          .send({
            method: "get",
            url: "/iplatform-data/metaDataV2/getGkyeData",
            config: {
              headers: {
                Authorization: "Bearer " + sessionStorage.getItem("token"),
              },
              fobbidenGateway: true,
              params: {
                area: '全市',
                month: this.dataStopMonth_balance,
                year: this.dataStopYear_balance
              }
            },
          })
          .then((res) => {
            console.log("获取国库余额数据", res);
            if (res.status == 200) {
              this.balanceData[0].amount = res.data.QCYE || 0;
              this.balanceData[1].amount = res.data.QMYE || 0;
              this.balanceData[2].amount = res.data.BQIN || 0;
              this.balanceData[3].amount = res.data.BQOUT || 0;
            }
            console.log(this.balanceData);
          });
    },

    checkWarnDetail(row) {
      // let rowData=this;
      console.log("当前预警记录ID", row.id);
      this.$router.push({
        path: "/waringRecord",
        query: {
          id: row.id,
        },
      });
    },

    //判断当前地区是在哪一个下穿级别 0省级 1市州 2区县
    checkLevel(name) {
      console.log("this.level1NameArr", this.level1NameArr);
      if (name == "泸州市") this.mapLevel = 0;
      else if (this.level1NameArr.indexOf(name) >= 0) this.mapLevel = 1;
      else this.mapLevel = 2;
      console.log("this.mapLevel", this.mapLevel);
    },
  },

  watch: {
    barChartSelectValue(nv) {
      this.getBarChartData(this.barChartDatafromBI);
    },
    currentAccountAuth: {
      handler(nv) {
        console.log("进入currentAccountAuth的watch", nv);
        //初始化四本
        Object.assign(
            this.$data.govDebtsData,
            this.$options.data().govDebtsData
        );
        console.log("this.govDebtsData", this.govDebtsData);

        //初始化政府债务的数据
        Object.assign(
            this.$data.budgetProcessData,
            this.$options.data().budgetProcessData
        );
        console.log("this.budgetProcessData", this.budgetProcessData);

        //四本dom的修改
        if (this.mapLevel === 0) {
          this.budgetProcessData[0].title = "全市收入";
          this.budgetProcessData[1].title = "全市支出";
          this.budgetProcessData[2].title = "市级收入";
          this.budgetProcessData[3].title = "市级支出";
          this.govDebtsData[0].area_type = "全市";
          this.govDebtsData[1].area_type = "市级";
        } else if (this.mapLevel === 1) {
          this.budgetProcessData[0].title = "全市收入";
          this.budgetProcessData[1].title = "全市支出";
          this.budgetProcessData[2].title = "区/县级收入";
          this.budgetProcessData[3].title = "区/县级支出";
          this.govDebtsData[0].area_type = "全市";
          this.govDebtsData[1].area_type = "区/县级";
        } else {
          this.budgetProcessData[0].title = "全市收入";
          this.budgetProcessData[1].title = "全市支出";
          this.budgetProcessData[2].title = "市级收入";
          this.budgetProcessData[3].title = "市级支出";
          this.govDebtsData[0].area_type = "全市";
          this.govDebtsData[1].area_type = "市级";
        }

        //将宏观经济默认为GDP
        this.barChartSelectValue = "GDP";

        //中间地图
        this.drawMapChart(this.mapSliderOpt);

        //左上 四本区域
        this.getBudgetProcessData(this.budgetProcessDatafromBI);

        //左下 柱图的修改
        this.getBarChartData(this.barChartDatafromBI);

        //右上 政府债务
        this.getGovDebtsData(this.govDebtsDatafromBI);

        //地区面板的右下角转移支付
        this.getDistinctTransferPaymentData(this.distinctTransferPaymentfromBI);
      },
    },
    $route: {
      handler(v, n) {
        //从数据资源池跳转的时候
        console.log("$route", v);
        if (v.query && v.query.origin == "dataPool") {
          this.currentAccountAuth = v.query.name;
          console.log("this.currentAccountAuth", this.currentAccountAuth);
          this.checkLevel(v.query.name);
          console.log("this.mapLevel", this.mapLevel);
          this.mapNameArr[this.mapLevel] = v.query.name;
          console.log("this.mapNameArr", this.mapNameArr);
        }

        //监听是否全屏
        this.$nextTick(() => {
          if (v.query.isFullscreen == "true") {
            this.toFullscreen();
          }
        });
      },
      immediate: true,
    },
  },
};
</script>

<style lang="scss" scoped>
@import "@/assets/style/common/panorama/basic.scss";

.overview-panel {
  height: 100%;
  width: 100%;
  font-size: 0.16rem;
  position: relative;
  box-sizing: border-box;
  background-image: url(~@/assets/imgs/overviewBg.png);
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;

  .shou {
    cursor: pointer;
  }

  .fullscreen-title {
    box-sizing: border-box;
    height: 0.77rem;
    background-image: url(~@/assets/imgs/titlebg.png);
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    text-align: center;
    line-height: 0.6rem;
    padding: 0 0.2rem;

    img:nth-of-type(1) {
      width: 1.3rem;
      cursor: pointer;
    }

    h1 {
      font-size: 0.28rem;
      font-weight: 900;
      color: #196de6;
      background: linear-gradient(to bottom, #00fcff, #196de6);
      background-clip: text;
      /* 兼容性较差 仅保留文字部分的背景色*/
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    img:nth-of-type(2) {
      width: 0.6rem;
      cursor: pointer;
    }
  }

  .inner-line {
    box-sizing: border-box;
    padding: 0.2rem;
    overflow: hidden;
    width: 100%;
    height: 100%;

    .middle-part {
      float: left;
      box-sizing: border-box;
      width: 100%;
      height: 100%;
      padding-left: 5.8rem;
      padding-right: 5.8rem;

      .center {
        box-sizing: border-box;
        width: 100%;
        height: 100%;
        position: relative;

        .center-top {
          padding: 0.1rem 0.4rem 0;

          .data-control,
          .fullscreen {
            box-sizing: border-box;
            padding-left: 0.2rem;
            padding-right: 0.2rem;
            cursor: pointer;

            &:hover {
              background-color: #00eeff;
              color: #0e213e;
            }
          }

          .center-date {
            margin: 0 auto;
          }
        }

        .map {
          width: 100%;
          height: 70%;
          position: relative;

          .map-chart {
            width: 100%;
            height: 100%;
          }

          .map-detail {
            box-sizing: border-box;
            width: 4.4rem;
            height: 1.4rem;
            position: absolute;
            background-color: #0e213e;
            top: 30%;
            left: 50%;
            transform: translate(-50%);
            border: #46e3fd 1px solid;
          }

          .in-or-out-tab {
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
            top: -0.1rem;
            display: flex;

            .in-or-out-item {
              box-sizing: border-box;
              width: 0.5rem;
              height: 0.3rem;
              line-height: 0.3rem;
              border: #00eeff 1px solid;
              border-radius: 4px;
              position: relative;
              cursor: pointer;
            }

            .in-or-out-item:nth-of-type(1) {
              padding-left: 0.1rem;
            }

            .in-or-out-item:nth-of-type(2) {
              padding-left: 0.2rem;
            }

            .in-or-out-icon {
              box-sizing: border-box;
              position: absolute;
              right: -0.15rem;
              bottom: -1px;
              width: 0.31rem;
              height: 0.31rem;
              line-height: 0.31rem;
              border-radius: 50%;
              border: #029dbe 4px solid;
              color: #fff;
              background-color: #0f2443;
              z-index: 1;
              display: flex;
              justify-content: center;
              align-items: center;
              cursor: pointer;
              transform: rotate(0deg);
              transition: transform 0.4s linear;
            }

            .in-or-out-icon-rotate {
              transform: rotate(90deg);
              transition: transform 0.4s linear;
            }

            .in-or-out-item-active {
              background-color: #00eeff;
              color: #0d2443;
            }

            .in-or-out-item-disabled {
              background-color: #0d2443;
              color: #00eeff;
            }
          }

          .map-arrow {
            position: absolute;
            width: 0.22rem;
            height: 0.22rem;
            line-height: 0.22rem;
            text-align: center;
            color: #0e213e;
            background-color: #00eeff;
            border-radius: 50%;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
          }

          .map-arrow-pre {
            left: -0.1rem;
          }

          .map-arrow-next {
            right: -0.1rem;
          }

          .map-slider-case {
            width: 100%;
            height: 100%;
          }

          .map-slider-item {
            box-sizing: border-box;
            width: 50%;
            height: 100%;
            padding: 0.2rem;
            border-right: 1px dotted #00eeff;

            .map-slider-item-title {
              font-size: 0.16rem;
              color: #00eeff;
              margin-bottom: 0.1rem;
            }

            .map-slider-item-ratio {
              margin-top: 0.1rem;
              padding-top: 0.1rem;
              border-top: 1px dotted #00eeff;
            }
          }
        }

        .rod {
          width: 5rem;
          position: absolute;
          left: 50%;
          transform: translateX(-50%);
          z-index: 1;
        }

        .info {
          box-sizing: border-box;
          width: 100%;
          height: 15%;
          padding-left: 0.6rem;
          padding-right: 0.6rem;
          padding-top: 0.4rem;

          .info-btn1 {
            width: 1.4rem;
            padding: 0.1rem 0;
            text-align: center;
            background-image: url(~@/assets/imgs/button1@2x.png);
            background-repeat: no-repeat;
            background-position: center;
            background-size: cover;
            cursor: pointer;

            &:hover {
              filter: alpha(Opacity=70);
              opacity: 0.7;
            }
          }

          .info-btn2 {
            width: 2rem;
            padding: 0.12rem 0;
            text-align: center;
            background-image: url(~@/assets/imgs/button2@2x.png);
            background-repeat: no-repeat;
            background-position: center;
            background-size: cover;
            cursor: pointer;

            &:hover {
              filter: alpha(Opacity=70);
              opacity: 0.7;
            }
          }
        }

        .info > div {
          display: flex;
          align-items: center;
          justify-content: space-around;
          margin-top: 0.2rem;
          margin-bottom: 0.2rem;
        }

        .distinct-info {
          .distinct-btn {
            display: flex;
            justify-content: center;
          }

          .distinct-btn div {
            width: 1rem;
            /* padding: 0.1rem 0; */
            text-align: center;
            background-image: url(~@/assets/imgs/leftbtn@2x.png);
            background-repeat: no-repeat;
            background-position: center;
            background-size: cover;
            cursor: pointer;

            &:hover {
              filter: alpha(Opacity=70);
              opacity: 0.7;
            }
          }

          .distinct-btn div:last-of-type {
            background-image: url(~@/assets/imgs/rightbtn@2x.png);
          }

          .disctinct-goto {
            box-sizing: border-box;
            /* border: 1px solid springgreen; */
            // height: 1.2rem;
            margin: 0.7rem auto 0;
            width: 80%;
            // position: relative;
            display: flex;
            justify-content: space-around;

            div {
              cursor: pointer;
            }

            // div:nth-of-type(1) {
            //   position: absolute;
            //   left: 50%;
            //   transform: translatex(-50%);
            //   cursor: pointer;
            // }
            // div:nth-of-type(2) {
            //   position: absolute;
            //   left: 50%;
            //   transform: translatex(-50%);
            //   bottom: 0;
            //   cursor: pointer;
            // }
            // div:nth-of-type(3) {
            //   position: absolute;
            //   left: 1rem;
            //   top: 50%;
            //   transform: translatey(-50%);
            //   cursor: pointer;
            // }
            // div:nth-of-type(4) {
            //   position: absolute;
            //   right: 1rem;
            //   top: 50%;
            //   transform: translatey(-50%);
            //   cursor: pointer;
            // }
          }

          .distinct-info-btn1 {
            width: 1.4rem;
            padding: 0.1rem 0;
            text-align: center;
            background-image: url(~@/assets/imgs/button1@2x.png);
            background-repeat: no-repeat;
            background-position: center;
            background-size: cover;
            cursor: pointer;

            &:hover {
              filter: alpha(Opacity=70);
              opacity: 0.7;
            }
          }
        }

        .leftrod {
          position: absolute;
          bottom: 0.5rem;
          left: 0.2rem;
          height: 3rem;
        }

        .rightrod {
          position: absolute;
          bottom: 0.5rem;
          right: 0.2rem;
          height: 3rem;
        }
      }
    }

    @media screen and (max-width: 1440px) {
      .middle-part {
        padding-left: 6.2rem;
      }
    }
    @media screen and (max-width: 1280px) {
      .middle-part {
        padding-left: 6.4rem;
      }
    }

    .left-part {
      box-sizing: border-box;
      width: 5.8rem;
      height: 100%;
      float: left;
      margin-left: -100%;

      .left-top {
        width: 100%;
        box-sizing: border-box;
        height: 4.1rem;
        position: relative;
        /* padding: 0.1rem; */
        padding-bottom: 0;
        overflow: hidden;

        .top-title {
          overflow: hidden;
        }

        .left-top-tab {
          box-sizing: border-box;
          height: 0.6rem;
          padding: 0 0.1rem;
          /* margin-top: 0.1rem; */
        }

        .left-top-content {
          box-sizing: border-box;
          height: calc(100% - 0.5rem);
        }

        .left-top-items {
          box-sizing: border-box;
          height: calc(100% - 0.5rem);

          .left-top-item {
            box-sizing: border-box;
            float: left;
            width: 50%;
            height: 50%;
            padding-left: 0.1rem;
            padding-right: 0.1rem;
            // padding-top:0.05rem;
            .left-top-item-content {
              box-sizing: border-box;
              margin-top: 0.05rem;

              .lefttop-flex {
                display: flex;
                /* justify-content: center; */
                margin-top: 0.1rem;
                align-items: flex-start;
              }

              @media screen and (min-height: 700px) {
                .lefttop-flex {
                  margin-top: 0.15rem;
                }
              }
            }

            .left-top-item-title {
              margin-bottom: 0.1rem;
            }

            .left-top-item-left {
              width: 1rem;
              height: 1rem;
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              position: relative;

              .liquid-fill-tag {
                position: absolute;
                bottom: -14px;
                left: 60%;
                transform: translateX(-50%);
                // margin-left: 0.1rem;
                width: 2.2rem;
                text-align: center;
                background-color: transparent;
              }

              @media screen and (max-width: 1440px) {
                .liquid-fill-tag {
                  bottom: -5px;
                }
              }
              @media screen and (max-width: 1680px) {
                .liquid-fill-tag {
                  bottom: -8px;
                }
              }
            }

            .left-top-item-right {
              // margin-left: 0.2rem;
              font-size: 0.12rem;
            }

            @media screen and (min-width: 1440px) {
              .left-top-item-right {
                /* margin-left: 0.2rem; */
                font-size: 0.14rem;
              }
              .left-top-item-left {
                width: 1rem;
                height: 1rem;
              }
            }

            .left-top-item-right > div {
              //   padding: 0.07rem;
              //   padding-right: 0.1rem;
              line-height: 0.3rem;
            }
          }

          .left-top-item:nth-of-type(1) {
            border-right: 1px dotted #00eeff;
            border-bottom: 1px dotted #00eeff;
          }

          .left-top-item:nth-of-type(2) {
            border-bottom: 1px dotted #00eeff;
            padding-left: 0.1rem;
          }

          .left-top-item:nth-of-type(3) {
            padding-top: 0.05rem;
            border-right: 1px dotted #00eeff;
          }

          .left-top-item:nth-of-type(4) {
            padding-top: 0.05rem;
            padding-left: 0.1rem;
          }
        }
      }

      @media screen and (min-height: 700px) {
        .left-top {
          height: 4.4rem;
        }
      }

      .left-bottom {
        box-sizing: border-box;
        height: calc(100% - 4.1rem);
        overflow: hidden;
        border-top: none;

        .compare {
          height: 0.14rem;
        }

        .left-bottom-content {
          box-sizing: border-box;
          padding: 0.1rem 0.2rem 0;
          display: flex;
          justify-content: space-between;
          align-items: baseline;
          position: relative;
        }

        .left-bottom-barChart {
          box-sizing: border-box;
          margin-left: 0.2rem;
          height: calc(100% - 1rem);
        }

        /* @media screen and (min-width: 1050px) {
					.left-bottom-barChart {
						height: 3rem;
					}
				} */
        /* @media screen and (min-width: 1279px) {
					.left-bottom-barChart {
						height: 4.5rem;
					}
				} */
        /* @media screen and (min-width: 1365px) {
					.left-bottom-barChart {
						height: 2.5rem;
					}
				} */
        /* @media screen and (min-width: 1439px) {
					.left-bottom-barChart {
						height: 2.4rem;
					}
				} */
        /* @media screen and (min-width: 1679px) {
					.left-bottom-barChart {
						height: 3rem;
					}
				} */
        /* @media screen and (min-width: 1919px) {
					.left-bottom-barChart {
						height: 3rem;
					}
				} */
      }

      @media screen and (min-height: 700px) {
        .left-bottom {
          height: calc(100% - 4.4rem);
        }
      }
    }

    @media screen and (max-width: 1440px) {
      .left-part {
        width: 6.2rem;
      }
    }
    @media screen and (max-width: 1280px) {
      .left-part {
        width: 6.4rem;
      }
    }

    .top-title > div:nth-child(1) {
      margin-left: -0.22rem;
      float: left;
    }

    .top-title > div:nth-child(2) {
      float: left;
      margin-left: 7px;
    }

    .top-title > div:nth-child(3) {
      float: right;
      line-height: 0.4rem;
    }

    .right-part {
      box-sizing: border-box;
      width: 5.8rem;
      height: 100%;
      float: left;
      margin-left: -5.8rem;

      .right-top {
        box-sizing: border-box;
        height: 2.3rem;
        overflow: hidden;

        .right-top-content {
          box-sizing: border-box;
          height: calc(100% - 38px);
          /* margin-top: 38px; */
          padding: 0.1rem;

          .right-top-items {
            display: flex;
            height: 0.7rem;

            .right-top-item-title {
              height: 0.4rem;
              line-height: 0.4rem;
              /* margin-right: 0.3rem; */
            }

            .right-top-content-left {
              width: 50%;
              display: flex;
              border-right: 1px dotted #00eeff;
              margin-right: 0.2rem;
            }

            .right-top-content-left > div > div:first {
              margin-right: 0.2rem;
            }

            .right-top-content-right {
              width: 45%;
            }
          }

          .right-top-items:nth-of-type(1) {
            padding-bottom: 0.1rem;
            border-bottom: 1px dotted #00eeff;
            margin-bottom: 0.1rem;
          }

          .right-top-firstblock {
            margin-right: 0.2rem;
            width: 1.2rem;
          }

          .right-top-ratio {
            display: flex;
            justify-content: space-between;
          }
        }
      }

      .right-bottom {
        box-sizing: border-box;
        height: calc(100% - 2.3rem);
        overflow: hidden;
        border-top: none;

        .right-bottom-content {
          box-sizing: border-box;
          height: calc(100% - 38px);
          // padding: 0 0.1rem 0;
        }

        .right-bottom-tab {
          /* border: 1px solid springgreen; */
          width: 35%;
          position: relative;

          .legend {
            position: absolute;
            right: -185%;
            top: 0.15rem;
            width: 2.4rem;
            /* border: red 1px solid; */
            background-color: #0e213e;
            display: flex;
            justify-content: space-between;
            z-index: 999999 !important;

            .legend-block {
              width: 0.12rem;
              height: 0.12rem;
              margin: 0 auto;
            }

            .legend-one-block {
              background-color: #f34646;
            }

            .legend-two-block {
              background-color: #e2c948;
            }

            .legend-three-block {
              background-color: #00eeff;
            }

            .legend-four-block {
              background-color: white;
            }

            .legend-one-text {
              color: #f34646;
            }

            .legend-two-text {
              color: #e2c948;
            }

            .legend-three-text {
              color: #00eeff;
            }

            .legend-four-text {
              color: white;
            }
          }
        }

        .right-bottom-bar {
          box-sizing: border-box;
          height: 0.5rem;
          border-bottom: 1px dotted #00eeff;

          .bar-three-part {
            width: 100%;
            height: 0.12rem;
            padding-top: 0.05rem;
            display: flex;

            .bar-part-one {
              background-color: #f34646;
              height: 0.12rem;
              width: var(--baronewidth);
              position: relative;

              div {
                color: #f34646;
                position: absolute;
                left: 50%;
                transform: translateX(-50%);
                bottom: -0.24rem;
              }
            }

            .bar-part-two {
              background-color: #e2c948;
              height: 0.12rem;
              width: var(--bartwowidth);
              position: relative;

              div {
                color: #e2c948;
                position: absolute;
                left: 50%;
                transform: translateX(-50%);
                bottom: -0.24rem;
              }
            }

            .bar-part-three {
              background-color: #00eeff;
              height: 0.12rem;
              width: var(--barthreewidth);
              position: relative;

              div {
                color: #00eeff;
                position: absolute;
                left: 50%;
                transform: translateX(-50%);
                bottom: -0.24rem;
              }
            }

            .bar-part-four {
              background-color: white;
              height: 0.12rem;
              width: var(--barfourwidth);
              position: relative;

              div {
                color: white;
                position: absolute;
                left: 50%;
                transform: translateX(-50%);
                bottom: -0.24rem;
              }
            }
          }
        }

        .right-bottom-balance {
          height: 1.4rem;
          border-bottom: #00eeff 1px solid;
          display: flex;
          flex-wrap: wrap;
          justify-content: space-around;

          .right-bottom-balance-item {
            width: 48%;
            display: flex;
            align-items: center;
            justify-content: space-around;

            .right-bottom-balance-item-title {
              color: #fff;
              font-size: 0.16rem;
            }

            .right-bottom-balance-item-amount {
              color: #00eeff;
              font-size: 0.18rem;
              font-weight: 900;
            }
          }
        }

        .right-bottom-table {
          box-sizing: border-box;
          // padding-top: 0.2rem;
          height: 100%;
        }

        .right-bottom-table-head {
          display: flex;
          justify-content: space-between;
          margin-bottom: 0.1rem;
        }

        .right-bottom-table-content {
          height: calc(100% - 2rem);
          box-sizing: border-box;
          padding-top: 0.1rem;
          // cursor: pointer;
        }

        .warn-img {
          width: 0.16rem;
          height: 0.16rem;
          border: none;
        }

        .distinct-payment-tab {
          /* border: 1px solid springgreen; */
          /* width: 100%; */
          /* position: relative; */
          box-sizing: border-box;
          padding: 0 0.1rem;
          height: calc(100% - 0.38rem);

          .distinct-tab-content {
            height: calc(100% - 0.2rem);
            box-sizing: border-box;
            padding-top: 0.2rem;
            overflow-y: auto;
            position: relative;
          }

          .distinct-tab-content::-webkit-scrollbar {
            /*滚动条整体样式*/
            width: 0.06rem; /*高宽分别对应横竖滚动条的尺寸*/
            height: 0.6rem;
          }

          .distinct-tab-content::-webkit-scrollbar-thumb {
            /*滚动条里面小方块*/
            /* border-radius: 10px; */
            /* box-shadow: inset 0 0 5px pink; */
            background: linear-gradient(180deg, #00fcff 0%, #196de6 100%);
          }

          .distinct-tab-content::-webkit-scrollbar-track {
            /*滚动条里面轨道*/
            box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            background: #0e213e;
          }

          .tab-data-title {
            line-height: 0.4rem;
            height: 0.4rem;
          }

          .tab-data-item {
            width: 29%;
            box-sizing: border-box;
            // margin-right: 0.2rem;
          }

          .tab-data-dash {
            height: 0.1rem;
            border-bottom: 1px solid #294b67;
            margin-bottom: 0.1rem;
          }
        }
      }
    }

    .special-btn {
      width: 0.25rem;
      min-width: none;
      padding: 4px 0px;
      background-color: #00eeff;
      font-size: 0.14rem;
      color: #0e213e;
      text-align: center;
      line-height: 1;
      display: inline-block;
    }

    .top-title {
      overflow: hidden;
    }
  }

  .inner-line-fullscreen {
    height: calc(100% - 0.7rem);
    box-sizing: border-box;
    padding: 0.1rem 0.2rem 0.3rem;
    overflow: hidden;
    width: 100%;
  }

  .dataEndTime {
    padding-right: 0.1rem;
  }
}

/* 修改element tab样式 */
/deep/ .el-tabs__item {
  color: #46e3fd;
  font-size: 0.15rem;
  font-weight: normal;
  padding: 0 12px;
}

/deep/ .el-tabs__item.is-active {
  font-size: 0.18rem;
  color: #46e3fd;
  font-weight: bold;
}

/deep/ .el-tabs__active-bar {
  background-color: #46e3fd;
}

/deep/ .el-tabs__nav-wrap::after {
  background-color: #46e3fd;
  height: 1px;
}

/deep/ .el-input__inner {
  width: 1.2rem;
  height: 0.32rem !important;
  line-height: 0.32rem !important;
  font-size: 0.16rem !important;
  border: 1px solid #46e3fd;
  color: #46e3fd;
  background-color: #0e213e;
}

/deep/ .el-input__icon {
  color: #46e3fd;
  height: 0.32rem !important;
  line-height: 0.32rem !important;
}

/deep/ .el-table .cell {
  font-size: 0.14rem;
  color: #fff !important;
}

/deep/ .el-table .el-table__header .has-gutter th {
  background-color: #255471 !important;
  font-size: 0.16rem;
  color: #fff !important;
}

/deep/ .el-table--enable-row-hover .el-table__body tr:hover > td {
  // background-color: rgba(0, 0, 0, 0) !important;
  filter: alpha(Opacity=70);
  opacity: 0.7;
  cursor: pointer;
}

.right-bottom-table-content /deep/ .el-table th,
.el-table tr {
  background-color: #0e213e !important;
  padding: 0.1rem 0;
}

/deep/ .el-table td,
.el-table th.is-leaf {
  border-bottom: 1px solid #255471;
}

///deep/ .el-table__body-wrapper::-webkit-scrollbar {
/* width: 0.06rem; */
/* height: 0.6rem; */
//}
/* 设置滚动条的背景色和圆角 */
/deep/ .el-table__body-wrapper::-webkit-scrollbar-thumb {
  background: linear-gradient(180deg, #00fcff 0%, #196de6 100%);
}

/deep/ .el-table__body-wrapper::-webkit-scrollbar-track {
  background-color: #0e213e;
}

/deep/ .el-table--fit {
  background-color: #0e213e;
}

/deep/ .el-table__footer-wrapper,
/deep/ .el-table__header-wrapper {
  background-color: #0e213e;
}

/deep/ .el-table--scrollable-y .el-table__body-wrapper {
  background-color: #0e213e;
}

.empty {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
  font-size: 0.2rem;
}
</style>
